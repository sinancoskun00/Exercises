// Datum: ‎27.11.‎2023
// TLDR: Implementierung eines eigenen Handlers für SAX

import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class ParseMe {

    public ParseMe() {
        try (InputStream eingabe = new FileInputStream(new File("Order.xml"))) {
            SAXParserFactory fabrik = SAXParserFactory.newInstance();
            SAXParser saxParser = fabrik.newSAXParser();
            DefaultHandler handler = new Handler();
            saxParser.parse(eingabe, handler);
        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new ParseMe();
    }

}

// -- Handler ab hier

package SAXParse2;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class Handler extends DefaultHandler {


    private StringBuilder currentElementContent = new StringBuilder();
    private double price;
    private double qty;
    private double total;

   // private String inhalt = "";

    @Override
    public void startDocument() throws SAXException {
        System.out.println("start:");

    }

    @Override
    public void endDocument() throws SAXException {
        System.out.printf("Gesamtsumme %85s" , total );
        System.out.println("\n:ende");
    }


    private void processElement(String elementName) {
        String content = currentElementContent.toString().trim();
        if (!content.isEmpty()) {
            System.out.printf("%-30s", content);

        }

    }

    @Override
    public void startElement(String namespaceURI, String localName, String qName,
                             Attributes atts) throws SAXException {

    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        //inhalt = inhalt + new String(ch, start, length);

            currentElementContent.append(ch, start, length);



    }

    @Override
    public void endElement(String uri, String localName, String qName) {

        if(qName.equals("OrderID")) {
            System.out.print("OrderID: ");
            processElement(qName);
            System.out.println("\n");
            System.out.printf("%-12s %22s %29s %29s", "Produktname", "Preis", "Menge", "Summe");
            System.out.println("\n---------------------------------------------------------------------------------------------------");
        }
        if(qName.equals("Productname")) {
            processElement(qName);
        }
        if(qName.equals("Price")) {
            price = Double.valueOf(currentElementContent.toString());
            processElement(qName);
        }
        if(qName.equals("Quantity")) {
            qty = Double.valueOf(currentElementContent.toString());
            processElement(qName);
            System.out.printf("%-30s", sumCalcString(price, qty));
            runningTotal(price, qty);
            System.out.println();
        }

        currentElementContent.delete(0, currentElementContent.length());
    }

    private String sumCalcString(double price, double qty) {
        double sum = price*qty;
      return String.valueOf(sum);
    }

    private double runningTotal(double price, double qty) {
        total += price*qty;
        return total;
    }
}
