// Datum: 20.04.2024
// TLDR: (ls, cat, grep, wc, sort) von Unix (stark simplifiziert) in einem Programm vereint

#include <stdio.h>
#include <string.h>
#include <getopt.h>
#include <ctype.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <unistd.h>
#include <alloca.h>
#include <stdlib.h>
#include <stdbool.h>
#include <dirent.h>
#include <pwd.h>
#include <time.h>
#include <grp.h>
#include <limits.h>
#include <locale.h>

int cat(int argc, char *argv[]);
int doCat(bool lineNum, bool printCtrl, bool showEol, FILE *fpInput);
int ls(int argc, char *argv[]);
int doLs(bool allFiles, bool longList, bool listDirs, const char *name);
int grep(int argc, char *argv[]);
int doGrep(bool caseInsensitive, bool invertMatch, FILE *fpInput, char *muster);
int wc(int argc, char *argv[]);
int doCount(bool countLines, bool countWords, bool countChars, FILE *file,
             int *lines, int *words, int *chars);
int sort(int argc, char *argv[]);
int doSort(bool sortReverse, int length, void *data);
bool endsWith(const char *arg, const char *command);



int main(int argc, char *argv[])

{
    if ( argc==0 ) {
        fprintf(stderr, "Syntax: BusyBox <args>\n");
        return 1;
    }
    if ( endsWith(argv[0], "cat") ) {
        return cat(argc, argv);
    }
    if ( endsWith(argv[0], "ls") ) {
        return ls(argc, argv);
    }
    if ( endsWith(argv[0], "grep") ) {
        return grep(argc, argv);
    }
    if ( endsWith(argv[0], "wc") ) {
        return wc(argc, argv);
    }
    if ( endsWith(argv[0], "sort") ) {
        return sort(argc, argv);
    }
    fprintf(stderr, "Unsupported command: %s\n", argv[0]);
    return 0;
}

bool endsWith(const char *arg, const char *command)

{
    char *lastSlash = strrchr(arg, '/');
    return lastSlash == NULL && strcmp(arg, command) == 0 ||
           lastSlash != NULL && strcmp(lastSlash + 1, command) == 0;
}

int cat(int argc, char *argv[])

{
    //Code für cat-Command (cat & doCat) war bereits vollständig in der Vorlage
    int option = 0;
    bool showEol = false;
    bool lineNum = false;
    bool printCtrl = false;
    while ((option = getopt(argc, argv, "vEn")) != -1) {
        switch (option) {
            case 'n':
                lineNum = true;
                break;
            case 'v':
                printCtrl = true;
                break;
            case 'E':
                showEol = true;
                break;
        }
    }

    if (optind == argc) {
        doCat(lineNum, printCtrl, showEol, stdin);
    } else {
        for (int i = optind; i < argc; ++i) {
            FILE *fpInput = fopen(argv[i], "r");
            if (fpInput == NULL) {
                perror(argv[i]);
                continue;
            }
            doCat(lineNum, printCtrl, showEol, fpInput);
            fclose(fpInput);
        }
    }
}

int doCat(bool lineNum, bool printCtrl, bool showEol, FILE *fpInput)
{
    int currentLine = 0;
    int currentChar;
    int lastChar = '\n';
    while ( (currentChar=fgetc(fpInput)) != -1) {
        if (lastChar == '\n') {
            if (lineNum) {
                printf("%5d ", currentLine++);
            }
        }
        if (currentChar == '\n') {
            if (showEol) {
                putc('$', stdout);
            }
            putc(currentChar, stdout);
        }
        else if ((currentChar >= 32 && currentChar <= 127) || isspace(currentChar)){
            putc(currentChar, stdout);
        }
        else if ( printCtrl ) {
            if ( currentChar < 32 ) {
                putc('^', stdout);
                putc(currentChar+'@', stdout);
            }
            else {
                printf("\\%03o", currentChar);
            }
        }
        else {
            putc(currentChar, stdout);
        }
        lastChar = currentChar;
    }
    return 0;
}

//hier zusammengeführt da einmal für Ordner und einmal für spezifische Dateien nötig
void printFileDetails(const char *path) {

    struct stat fileStat;
    if(stat(path, &fileStat) == -1) {
        perror(path);
        return;
    }

    //Zeitanzeige
    setlocale(LC_TIME, "");
    time_t now = time(NULL);
    struct tm *current_time = localtime(&now);
    int current_year = current_time->tm_year + 1900;
    struct tm *file_time = localtime(&fileStat.st_mtime);
    int file_year = file_time->tm_year + 1900;
    char timeString[50];

    //wenn zuletzt dieses Jahr bearbeitet, dann Zeit mit Monat, Tag, Uhrzeit
    if (file_year == current_year) {
        strftime(timeString, sizeof(timeString), "%b %e %H:%M", file_time);
    } else {
        // wenn davor, dann Monat, Tag, Jahr
        strftime(timeString, sizeof(timeString), "%b %d  %Y", file_time);
    }
    //Ordner or not?
    printf((S_ISDIR(fileStat.st_mode)) ? "d" : "-");
    // Zugriffsrechte
    printf((fileStat.st_mode & S_IRUSR) ? "r" : "-");
    printf((fileStat.st_mode & S_IWUSR) ? "w" : "-");
    printf((fileStat.st_mode & S_IXUSR) ? "x" : "-");
    printf((fileStat.st_mode & S_IRGRP) ? "r" : "-");
    printf((fileStat.st_mode & S_IWGRP) ? "w" : "-");
    printf((fileStat.st_mode & S_IXGRP) ? "x" : "-");
    printf((fileStat.st_mode & S_IROTH) ? "r" : "-");
    printf((fileStat.st_mode & S_IWOTH) ? "w" : "-");
    printf((fileStat.st_mode & S_IXOTH) ? "x " : "- ");
    // Anzahl der Links
    printf("%2ld ", (long)fileStat.st_nlink);
    // Benutzername
    struct passwd *pw = getpwuid(fileStat.st_uid);
    printf("%-10s ", pw ? pw->pw_name : "Unknown");
    // Gruppenname
    struct group *gr = getgrgid(fileStat.st_gid);
    printf("%-10s ", gr ? gr->gr_name : "Unknown");
    // Dateigröße
    printf("%8lld ", (long long)fileStat.st_size);
    // Letzte Änderungszeit
    printf("%s ", timeString);
    printf("%s\n", path);
}

int ls(int argc, char *argv[])

{
   //Option für -a, -l, -d
    int option = 0;
    bool allFiles = false;
    bool longList = false;
    bool listDirs = false;
    //Optionen aus der Kommandozeile parsen
    while ((option = getopt(argc, argv, "lad")) != -1) {
        //je nach Option bools answitchen
        switch (option) {
            case 'a':
                allFiles = true;
                break;
            case 'l':
                longList = true;
                break;
            case 'd':
                listDirs = true;
                break;
        }
    }
    //wenn optind == argc, dann gibt es keine weiteren Kommandozeilenargumente mehr
    //in dem Fall checken wir ob wir Zugriff haben. Wenn ja, dann wird current directory (".") gelistet.
    if (optind == argc) {
        if (access(".", F_OK) == 0) {
            doLs(allFiles, longList, listDirs, ".");
        }
        //weitere Kommandozeilenargumente - itererie drüber, speicher sie
        //check ob Ordner, da in dem Fall anders vorgegangen wird
    } else {
        for (int i = optind; i < argc; ++i) {
            struct stat path_stat;
            if (stat(argv[i], &path_stat) == 0) {
                if (S_ISDIR(path_stat.st_mode)) {
                    doLs(allFiles, longList, listDirs, argv[i]);
                } else {
                    //überlappende printLines die nur bei longList ausgeschaltet werden müssen
                    //sonst teils doppelt
                    if(!longList) {
                        printf("%s\n", argv[i]);
                    } else {
                        printFileDetails(argv[i]);
                    }
                }
            } else {
                perror(argv[i]);
            }
        }
    }
}


//redundant, i think -- wollte hier eigentlich an Sortierung arbeiten
//aber schien nicht nötig
int compare_filenames(const void *a, const void *b) {
    const struct dirent *entry1 = *(const struct dirent **)a;
    const struct dirent *entry2 = *(const struct dirent **)b;
    return strcmp(entry1->d_name, entry2->d_name);
}


int doLs(bool allFiles, bool longList, bool listDirs, const char *name) {
    //Ordner und Dateien aufnehmen
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    dir = opendir(name);
    if (dir == NULL) {
        perror(name);
        return 1;
    }
    if (listDirs) {
        printf("%s\n", name);   //Ordner printen
    }
    while ((entry = readdir(dir)) != NULL) {
        if ((listDirs && entry->d_name[0] != '.') || (!allFiles && entry->d_name[0] == '.')) {
            continue;
        }
        char path[PATH_MAX];
        snprintf(path, sizeof(path), "%s/%s", name, entry->d_name);
        if (lstat(path, &fileStat) < 0) {
            perror(path);
            closedir(dir);
            return 1;
        }
        if (longList) {
            printFileDetails(path);
        } else {
            printf("%s\n", entry->d_name);
        }
    }
    closedir(dir);
    return 0;
}

int grep(int argc, char *argv[])

{
    int option = 0;
    bool caseInsensitive = false;
    bool invertMatch = false;

    while ((option = getopt(argc, argv, "vi")) != -1) {
        switch (option) {
            case 'i':
                caseInsensitive = true;
                break;
            case 'v':
                invertMatch = true;
                break;
        }
    }
    //gleiche Logik wie ls
    if (optind == argc) {
        printf("wrong");
        return 0;
        //anders: wir übernehmen das zu Suchende Muster aus der Kommandozeile
    } else {
        char *muster = argv[optind];
        optind++;
        //redundanter Code aber whatever, funktioniert
        if(optind == argc) {
            printf("wrong");
            return 0;
        }
        //iterieren über Optionen & Argumente, öffnen Datei
        for (int i = optind; i < argc ; ++i) {
            FILE *fpInput = fopen(argv[i], "r");
            if (fpInput == NULL) {
                perror(argv[i]);
                continue;
            }
            doGrep(caseInsensitive, invertMatch, fpInput, muster);
            fclose(fpInput);
        }
    }
}

//Farbe - Normal 'grep' macht rot
#define ANSI_COLOR_X     "\x1b[36;1;4m"
#define ANSI_COLOR_RESET   "\x1b[0m"

int doGrep(bool caseInsensitive, bool invertMatch, FILE *fdInput, char *muster) {
    //ähnliches Verhalten wie cat, was bereits vorgegeben war - konnte deshalb als Vorlage benutzt werden
    int currentChar;
    char currentLine[1024];
    int lineIndex = 0;

    //solang wir nicht am Ende der Datei (EOF) angekommen sind, ...
    while ((currentChar = fgetc(fdInput)) != EOF) {
        if (currentChar == '\n') {
            currentLine[lineIndex] = '\0';
            lineIndex = 0;

            if ((!invertMatch && strstr(currentLine, muster)) || (invertMatch && !strstr(currentLine, muster))) {
                char coloredLine[1024];
                char *match;
                //wenn in der aktuellen Zeile das Muster gefunden wurde,...
                if ((match = strstr(currentLine, muster)) != NULL) {
                    //printen wir die Zeile, aktivieren Farbe, printen Muster, resetten Farbe
                    //viele placeholder weil hat nicht anders funktioniert
                    sprintf(coloredLine, "%.*s%s%s%s", (int)(match - currentLine), currentLine, ANSI_COLOR_X, muster, ANSI_COLOR_RESET);
                    strcat(coloredLine, match + strlen(muster));
                    printf("%s\n", coloredLine);
                } else {
                    printf("%s\n", currentLine);
                }
            }
        } else {
            //wenn nicht auffindbar, dann weiter
            currentLine[lineIndex++] = currentChar;
            if (lineIndex >= sizeof(currentLine) - 1) {
                fprintf(stderr, "wrong\n");
                return -1;
            }
        }
    }
    return 0;
}

int doCount(bool countLines, bool countWords, bool countChars, FILE *file,
            int *lines, int *words, int *chars) {
    //für zählen in aktueller Datei
    int localLines = 0, localWords = 0, localChars = 0;
    //check um spaces und Umbrüche zu verarbeiten
    bool isAWord = false;
    int currentChar;

    //solange nicht Dateiende,...
    while ((currentChar = fgetc(file)) != EOF) {
        localChars++;
        if (currentChar == '\n') localLines++;

        if (isspace(currentChar)) {
            if (isAWord) localWords++; isAWord = false;
        } else isAWord = true;
    }

    if (isAWord) localWords++;
    if (countLines) *lines += localLines;
    if (countWords) *words += localWords;
    if (countChars) *chars += localChars;

    return localLines; // wird in wc benutzt
}

int wc(int argc, char *argv[]) {
    bool countLines = false, countWords = false, countChars = false;
    int totalCount = 0;
    int globalLines = 0, globalWords = 0, globalChars = 0;
    int option = 0;

    while ((option = getopt(argc, argv, "lwc")) != -1) {
                switch (option) {
                    case 'l':
                        countLines = true;
                        break;
                    case 'w':
                        countWords = true;
                        break;
                    case 'c':
                        countChars = true;
                        break;
                }
    }

    // wenn keine Optionen, dann -lwc (hätte evtl default case sein können?)
    if (!countLines && !countChars && !countWords) {
        countLines = true;
        countWords = true;
        countChars = true;
    }

    for (int i = optind; i < argc; ++i) {
        if (argv[i][0] == '-') continue;

        FILE *fpInput = fopen(argv[i], "r");
        if (fpInput == NULL) {
            perror(argv[i]);
            continue;
        }

        int localLines = 0, localWords = 0, localChars = 0;
        localLines = doCount(countLines, countWords, countChars, fpInput, &localLines, &localWords, &localChars);
        if(countLines)  printf("%5d ", localLines);
        if (countWords) printf("%4d ", localWords);
        if (countChars) printf("%4d ", localChars);

        printf("%s\n", argv[i]);
        fclose(fpInput);

       //globale Counts updaten
        globalLines += localLines; globalWords += localWords; globalChars += localChars;
        totalCount++;
    }

    //was printen bei mehreren?
    if (totalCount > 1) {
        if(countLines) printf("%5d ", globalLines);
        if (countWords) printf("%4d ", globalWords);
        if (countChars) printf("%4d ", globalChars);
        printf("insgesamt\n");
    }
    return 0;
}

int sort(int argc, char *argv[])

{
    bool sortReverse = false;
    if (argc > 1 && strcmp(argv[1], "-r") == 0) {
        sortReverse = true;
        argc--;
        argv++;
    }
    if (argc < 2) {
        fprintf(stderr, "Usage: %s [-r] filename\n", argv[0]);
        return 1;
    }

    int fd=open(argv[1], O_RDONLY);
    if ( fd == -1 ) {
        perror(argv[1]);
        return 1;
    }
    struct stat st;
    stat(argv[1], &st);
    void *data = mmap(NULL, st.st_size, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
    if ( data == NULL ) {
        perror(argv[1]);
        return 1;
    }
    doSort(sortReverse, st.st_size, data);
    munmap(data, st.st_size);
    close(fd);
    return 0;
}



int comparator(const void *p1, const void *p2)

{
    //Leerzeichen rausnehmen
    const char **c1 = p1;
    const char **c2 = p2;
    while(**c1 == ' ') ++(*c1);
    while (**c2 == ' ') ++(*c2);
    return strcasecmp(*c1, *c2);

}

int doSort(bool sortReverse, int length, void *data)

{
    int lines = 0;
    char *cData = data;
    char *nData;
    while ((nData = strchr(cData, '\n')) != NULL) {
        lines++;
        cData = nData + 1;
    }
    const char **aData = alloca(lines * sizeof(const char *));
    int line = 0;
    cData = data;
    while ((nData = strchr(cData, '\n')) != NULL) {
        if (*cData - 1 == '\n') { // Corrected comparison
            while (isspace(*cData)) {
                cData++;
            }
        }
        aData[line++] = cData; // Corrected assignment
        *nData = '\0';
        cData = nData + 1;
    }
    qsort(aData, lines, sizeof(const char *), comparator);
    if (!sortReverse) {
        for (int i = 0; i < lines; ++i) {
            printf("%s\n", aData[i]);
        }
    } else {
        for (int i = lines - 1; i >= 0; --i) { // reverse ausgeben
            printf("%s\n", aData[i]);
        }
    }
}


