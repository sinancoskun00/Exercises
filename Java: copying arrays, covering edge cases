//  Datum: 17.10.2023
//  TLDR: Java Code um Arrays zu kopieren
//  stellt Index-OOB-Exception sicher wenn Längen nicht stimmen
//  Integer zu byte-Kopierung
//  IllegalArgumentException wenn inkompatible Typen
//  uvm.

public class CopyElements {
    /**
     * Method to copy objects from the array src into the array dst.
     */

    public static void copy(Object[] src, int srcIndex, Object[] dst, int dstIndex, int length) {

        //Wertebereiche für OOB-Exception prüfen
        checkRanges(src.length, srcIndex, dst.length, dstIndex, length);

        //Prüfen ob Elemente von Quell- zu Ziel kopierbar, i.e. kompatibel miteinander
        for (int i = 0; i < length; i++) {
            if (src[i] != null && !dst.getClass().getComponentType().isAssignableFrom(src[i].getClass())) {
                throw new ClassCastException();
            }
        }

        //Kopieroperation Quell zu Zielarray via System-interne Methode
        System.arraycopy(src, srcIndex, dst, dstIndex, length);



    }

    /**
     * Method to copy ints from the array src into the byte array dst. 
     */
    public static void copy(int[] src, int srcIndex, byte[] dst, int dstIndex,
                            int length, boolean check) {

        //wieder Wertebereiche prüfen
        checkRanges(src.length, srcIndex, dst.length, dstIndex, length);


        if (check) {
            for (int i = srcIndex; i < srcIndex + length; i++) {
                int value = src[i];

                // ist alles valide für Byte-Werte?
                if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {
                    throw new IllegalArgumentException("kein valider Byte-Wert");
                }
            }
        }

        //Byte-Array dient als Zwischenspeicher zum copy-pasten
        byte[] temp = new byte[src.length];

        //int-Elemente aus src auf Byte casten, via for-loop in Zwischenspeicher
        for (int i = 0; i < length; i++) {
            temp[i] = (byte) src[i];
        }

        //von Zwischenspeicher zu Zielarray
        System.arraycopy(temp, srcIndex, dst, dstIndex, length);

    }
    /**
     * Method to copy bytes from the array src into the int array dst
     */
    public static void copy(byte[] src, int srcIndex, int[] dst, int dstIndex, int length, boolean sign) {
        //Wertebereich-Check #3
        checkRanges(src.length, srcIndex, dst.length, dstIndex, length);

        //Ziwschenspeicher-Array; so groß wie zu kopierende Elemente
        int[] temp = new int[length];

        if (sign) {
            for (int i = 0; i < length; i++) {
                // if sign == true => direkt kopieren
                temp[i] = src[i];
            }
        } else {
            for (int i = 0; i < length; i++) {
                // if sign == false => byte zu 'unsigned' int
                int tempVal = Byte.toUnsignedInt(src[i]);
                temp[i] = tempVal;
            }
        }

        //Kopieroperation
        System.arraycopy(temp, srcIndex, dst, dstIndex, length);

    }

    /**
     * Private method to check array ranges. You can implement it, but you are
     * not required to do so.
     */
    private static void checkRanges(int srcLength, int srcIndex, int dstLength, int dstIndex, int length) {
        //sämtliche Wege outOfBounds zu kommen abdecken
        if (srcIndex < 0 || dstIndex < 0 || (srcIndex + length > srcLength) || (dstIndex + length > dstLength) || length < 0) {
            throw new ArrayIndexOutOfBoundsException("Wert ist nicht gültig für das vorliegende Array");
        }
    }
}
